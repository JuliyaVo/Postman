Postman_HW_2_actions


http://162.55.220.72:5005/first
1. Отправить запрос.
Done
2. Статус код 200
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
    
3. Проверить, что в body приходит правильный string.

pm.test("Body matches string", function () {
    pm.expect(pm.response.text()).to.include("This is the first responce from server!");
});

http://162.55.220.72:5005/user_info_3
1. Отправить запрос.
{
"method": "POST"
"Body":[
     {
     "form-data":[
           "name":"Juliya"
           "age":39
           "salary": 1568
           ]
       }
}

2. Статус код 200

pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

3. Спарсить response body в json.

var resp_b = pm.response.json()

4. Проверить, что name в ответе равно name s request (name вбить руками.)

pm.test("Check name", function () {
    pm.expect(resp_b.name).to.eql("Juliya");
});
5. Проверить, что age в ответе равно age s request (age вбить руками.)

pm.test("Check age", function () {
    pm.expect(resp_b.age).to.eql("39")
    });

6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)

pm.test("Check salary", function () {
    pm.expect(resp_b.salary).to.eql(1568);
});
7. Спарсить request.
var Req_b = request.data

8. Проверить, что name в ответе равно name s request (name забрать из request.)

pm.test("Name_resp is Name_req", function () {
     pm.expect(resp_b.name).to.eql(Req_b.name)
})

9. Проверить, что age в ответе равно age s request (age забрать из request.)

pm.test("Age_resp is Age_req", function () {
      pm.expect(resp_b.age).to.eql(Req_b.age)
})

10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)

pm.test("S_resp is S_req", function () {
    pm.expect(resp_b.salary).to.eql(+(Req_b.salary))
})

11. Вывести в консоль параметр family из response.

console.log("family:", resp_b.family)

12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)

pm.test("S_1.5 is S_4", function () {
    pm.expect(resp_b.u_1_5_year).to.eql(resp_b.salary*4)
})

http://162.55.220.72:5005/object_info_3
1. Отправить запрос.
Done

2. Статус код 200

pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

3. Спарсить response body в json.

var resp_o = pm.response.json()

4. Спарсить request.

var req_JSON = pm.request.url.query.toObject()

5. Проверить, что name в ответе равно name s request (name забрать из request.)

pm.test("N_resp is N_req", function () {
    pm.expect(resp_o.name).to.eql(req_o.name)
})

6. Проверить, что age в ответе равно age s request (age забрать из request.)

pm.test("Age_resp is Age_req", function () {
    pm.expect(resp_o.age).to.eql(req_o.age)
})

7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)

pm.test("S_resp is S_req", function () {
    pm.expect(resp_o.salary).to.eql(+(req_o.salary))
})

8. Вывести в консоль параметр family из response.

console.log("family:", resp_o.family)

9. Проверить, что у параметра dog есть параметры name.

pm.test("DOG has name", function () {
    pm.expect(resp_o.family.pets.dog).to.have.property("name")
})

10. Проверить, что у параметра dog есть параметры age.

pm.test("DOG has age", function () {
    pm.expect(resp_o.family.pets.dog).to.have.property("age")
})

11. Проверить, что параметр name имеет значение Luky.

pm.test("Name is Luky", function () {
    pm.expect(resp_o.family.pets.dog.name).to.eql("Luky")
})

12. Проверить, что параметр age имеет значение 4.

pm.test("Age is 4", function () {
    pm.expect(resp_o.family.pets.dog.age).to.eql(4)
})
http://162.55.220.72:5005/object_info_4
1. Отправить запрос.
Done
2. Статус код 200

pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});
3. Спарсить response body в json.

resp_o_4 = pm.response.json()

4. Спарсить request.

req_o_4 = pm.request.url.query.toObject()

5. Проверить, что name в ответе равно name s request (name забрать из request.)

pm.test("Name_resp is Name_req", function () {
       pm.expect(resp_o_4.name).to.eql(req_o_4.name)
      }) 
6. Проверить, что age в ответе равно age из request (age забрать из request.)

pm.test("Age_resp is Age_req", function () {
   pm.expect(resp_o_4.age).to.eql(+(req_o_4.age))
})
7. Вывести в консоль параметр salary из request.

console.log("salary:", req_o_4.salary)

8. Вывести в консоль параметр salary из response.

console.log("salary:", resp_o-4.salary)

9. Вывести в консоль 0-й элемент параметра salary из response.

console.log("salary:", resp_o_4.salary[0])

10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.

console.log("salary:", resp_o_4.salary[1])

11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.

console.log("salary:", resp_o_4.salary[2])

12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)
pm.test("Param_0 is S_req", function () {
  pm.expect(resp_o_4.salary[0]).to.eql(+(req_o_4.salary))
});
13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)

pm.test("Param_1 is S_req*2", function () {
   pm.expect(+(resp_o_4.salary[1])).to.eql(req_o_4.salary*2)
});
   
14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)

pm.test("Param_2 is S_req*3", function () {
   pm.expect(+(resp_o_4.salary[2])).to.eql(req_o_4.salary*3)
});

15. Создать в окружении переменную name
New Environment > User_info > name
16. Создать в окружении переменную age
New Environment > User_info > age
17. Создать в окружении переменную salary
New Environment > User_info > salary
18. Передать в окружение переменную name

pm.environment.set("name", resp_o_4.name);

19. Передать в окружение переменную age

pm.environment.set("age", resp_o_4.age);

20. Передать в окружение переменную salary

pm.environment.set("salary", resp_o_4.salary[0])

21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.

for(var x in resp_o_4.salary) {
    console.log(x+ "element:" + resp_o_4.salary[x]);
}

http://162.55.220.72:5005/user_info_2
1. Вставить параметр salary из окружения в request
New Request > 
  method > POST
  Body > form-data >
       key > salary
       value > {{salary}}
2. Вставить параметр age из окружения в age
New Request > 
  method > POST
  Body > form-data >
       key > age
       value > {{age}}
3. Вставить параметр name из окружения в name
New Request > 
  method > POST
  Body > form-data >
       key > name
       value > {{name}}
4. Отправить запрос.
Done
5. Статус код 200
 
 pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});
6. Спарсить response body в json.
var resp_2 = pm.response.json()

7. Спарсить request.
var req_2 = request.data

8. Проверить, что json response имеет параметр start_qa_salary

pm.test("Resp has param start_qa_salary", function () {
    pm.expect(resp_2).to.have.property("start_qa_salary")
})
9. Проверить, что json response имеет параметр qa_salary_after_6_months

pm.test("Resp has param qa_salary_after_6_months", function() {
    pm.expect(resp_2).to.have.property("qa_salary_after_6_months")
})
10. Проверить, что json response имеет параметр qa_salary_after_12_months

pm.test("Resp has param qa_salary_after_12_months", function () {
    pm.expect(resp_2).to.have.property("qa_salary_after_12_months")
})
11. Проверить, что json response имеет параметр qa_salary_after_1.5_year

pm.test("Resp has param qa_salary_after_1.5_year", function () {
    pm.expect(resp_2).to.have.property("qa_salary_after_1.5_year")
})

12. Проверить, что json response имеет параметр qa_salary_after_3.5_years
pm.test("Resp has param qa_salary_after_3.5_years", function () {
    pm.expect(resp_2).to.have.property("qa_salary_after_3.5_years")
})

13. Проверить, что json response имеет параметр person
pm.test("Resp has param person", function () {
    pm.expect(resp_2).to.have.property("person")
})
14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)
pm.test("Param start_qa_salary is req_2.salary", function () {
    pm.expect(resp_2.start_qa_salary).to.eql(+(req_2.salary))
})
15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)
pm.test("Param qa_salary_after_6_months is req_2.salary*2", function () {
    pm.expect(resp_2.qa_salary_after_6_months).to.eql(+(req_2.salary*2))
})

16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)

pm.test("Param qa_salary_after_12_months is req_2.salary*2.7", function () {
    pm.expect(resp_2.qa_salary_after_12_months).to.eql(+(req_2.salary*2.7))
})
17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)

pm.test("Param q_s_a_1.5 is req_2.s*3.3", function () {
    pm.expect(resp_2['qa_salary_after_1.5_year']).to.eql(+(req_2.salary*3.3))
})
18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)

pm.test("Param q_s_a_3.5 is req_2.s*3.8", function () {
    pm.expect(resp_2['qa_salary_after_3.5_years']).to.eql(+(req_2.salary*3.8))
})
19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)

pm.test("U_name[1] is req_2.salary", function () {
    pm.expect(resp_2.person.u_name[1]).to.eql(+(req_2.salary))
})
20. Проверить, что что параметр u_age равен age из request (age забрать из request.)

pm.test("Param u_age is req_2.age", function () {
    pm.expect(resp_2.person.u_age).to.eql(+(req_2.age))
})

21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)

pm.test("u_salary_5_years is req_2.salary*4.2", function () {
    pm.expect(resp_2.person.u_salary_5_years).to.eql(+(req_2.salary*4.2))
})

22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.
for(var x in resp_2.person) {
    console.log(resp_2.person + x + "=" + resp_2.person[x])
}
Footer
© 2023 GitHub, Inc.
Footer navigation
Terms
Privacy
Security
Status
Docs
Contact GitHub
Pricing
API
Training
Blog
About
